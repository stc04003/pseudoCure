// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pgee
Rcpp::List pgee(arma::vec y, arma::mat X, arma::vec b0, arma::vec nt, arma::vec pindex, std::string glmlink, std::string corstr, double lambda, double eps, double tol, int maxit);
RcppExport SEXP _pseudoCure_pgee(SEXP ySEXP, SEXP XSEXP, SEXP b0SEXP, SEXP ntSEXP, SEXP pindexSEXP, SEXP glmlinkSEXP, SEXP corstrSEXP, SEXP lambdaSEXP, SEXP epsSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nt(ntSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pindex(pindexSEXP);
    Rcpp::traits::input_parameter< std::string >::type glmlink(glmlinkSEXP);
    Rcpp::traits::input_parameter< std::string >::type corstr(corstrSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(pgee(y, X, b0, nt, pindex, glmlink, corstr, lambda, eps, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// gee
Rcpp::List gee(arma::vec y, arma::mat X, arma::vec b0, arma::vec nt, std::string glmlink, std::string corstr, double tol, int maxit);
RcppExport SEXP _pseudoCure_gee(SEXP ySEXP, SEXP XSEXP, SEXP b0SEXP, SEXP ntSEXP, SEXP glmlinkSEXP, SEXP corstrSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nt(ntSEXP);
    Rcpp::traits::input_parameter< std::string >::type glmlink(glmlinkSEXP);
    Rcpp::traits::input_parameter< std::string >::type corstr(corstrSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(gee(y, X, b0, nt, glmlink, corstr, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// geeCV
arma::mat geeCV(arma::vec y, arma::mat X, arma::vec b0, arma::vec nt, arma::vec pindex, std::string glmlink, std::string corstr, int nCV, arma::vec lambda, double eps, double tol, int maxit);
RcppExport SEXP _pseudoCure_geeCV(SEXP ySEXP, SEXP XSEXP, SEXP b0SEXP, SEXP ntSEXP, SEXP pindexSEXP, SEXP glmlinkSEXP, SEXP corstrSEXP, SEXP nCVSEXP, SEXP lambdaSEXP, SEXP epsSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nt(ntSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pindex(pindexSEXP);
    Rcpp::traits::input_parameter< std::string >::type glmlink(glmlinkSEXP);
    Rcpp::traits::input_parameter< std::string >::type corstr(corstrSEXP);
    Rcpp::traits::input_parameter< int >::type nCV(nCVSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(geeCV(y, X, b0, nt, pindex, glmlink, corstr, nCV, lambda, eps, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// pseudoKM
arma::vec pseudoKM(const arma::vec Time, const arma::vec censor);
RcppExport SEXP _pseudoCure_pseudoKM(SEXP TimeSEXP, SEXP censorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type censor(censorSEXP);
    rcpp_result_gen = Rcpp::wrap(pseudoKM(Time, censor));
    return rcpp_result_gen;
END_RCPP
}
// pseudoKM1
arma::mat pseudoKM1(const arma::vec Time, const arma::vec censor, const arma::vec Q);
RcppExport SEXP _pseudoCure_pseudoKM1(SEXP TimeSEXP, SEXP censorSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type censor(censorSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(pseudoKM1(Time, censor, Q));
    return rcpp_result_gen;
END_RCPP
}
